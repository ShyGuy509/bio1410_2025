sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]] = "Others" # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others`
list_of_all_taxonomic_rank[[i]] = sample #save this dataframe in our list
}
df = do.call("rbind",list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe
unique_taxon = data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa
name = colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line
names(unique_taxon)[names(unique_taxon) == name] = as.character(taxa_rank) # Rename the column to the taxa rank defined earlier
# get the total number of unique most abundant taxa
n = nrow(unique_taxon)
# generate a set of X unique colors corresponding to the number of unique taxa
palette = distinctColorPalette(n)
unique_taxon[[taxa_rank]] = factor(unique_taxon[[taxa_rank]])
names(palette) = levels(unique_taxon[[taxa_rank]])
# assign gray to category "Others". The same nomenclature can be use to manually change certain colors.
palette[["Others"]] = "#E1E1E1"
#  recreate palette with markdown to italicize name and remove the underscore after Unclassified
all_names = data.frame(names(palette))
names_markdown = all_names %>%
mutate(names.palette. = str_replace(names.palette., "(.*)","*\\1*"), # Adding asterisk at beginning and end of every taxa
names.palette. = str_replace(names.palette., "\\*Unclassified_(.*)\\*","Unclassified *\\1*"), # Removing the asterisk for words that don't need to be italicize (Unclassified and Others)
names.palette. = str_replace(names.palette., "\\*Others\\*", "Others"))
list_names=as.vector(names_markdown$names.palette.)
# Replace names of object
names(palette) = c(list_names)
# Making the same modification to the taxa name from the legend to the taxa names in the dataframe
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "(.*)","*\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Unclassified_(.*)\\*","Unclassified *\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Others\\*", "Others")
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "bottom",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 6, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 6, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 20, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 40, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 81, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
taxa_rank <- "Genus"
# Defining the number of most abundant taxa to keep
number_of_taxa = 8
ps_rel_abund=transform_sample_counts(ps, function(x) x/sum(x))
ps_glom = tax_glom(ps_rel_abund, taxrank = taxa_rank)
melted_df = psmelt(ps_glom)
# Create an empty list that we will populated with the unique taxa of each sample
list_of_all_taxonomic_rank= list()
i = 0
# Beginning of the for loop
for (each_sample in unique(melted_df$Sample)){
i = i + 1
sample = subset(melted_df, Sample == each_sample) # Create a new dataframe from the iterator (sample).
total_abundance = aggregate(sample$Abundance, by = list(taxa_rank = sample[[taxa_rank]]), FUN = sum) # Combine together the same taxa and sum the abundances
top = head(total_abundance[order(total_abundance$x, decreasing= T),], n = number_of_taxa) # Sort by abundance and keep only the X number of taxa defined by variable number_of_taxa
others_df = sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # Extract in a new dataframe all taxa that are not present in the dataframe `top`
others_list = pull(others_df, taxa_rank) # Create a list by pulling all the values from the column corresponding to the taxa_rank into a list
sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]] = "Others" # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others`
list_of_all_taxonomic_rank[[i]] = sample #save this dataframe in our list
}
df = do.call("rbind",list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe
unique_taxon = data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa
name = colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line
names(unique_taxon)[names(unique_taxon) == name] = as.character(taxa_rank) # Rename the column to the taxa rank defined earlier
# get the total number of unique most abundant taxa
n = nrow(unique_taxon)
# generate a set of X unique colors corresponding to the number of unique taxa
palette = distinctColorPalette(n)
unique_taxon[[taxa_rank]] = factor(unique_taxon[[taxa_rank]])
names(palette) = levels(unique_taxon[[taxa_rank]])
# assign gray to category "Others". The same nomenclature can be use to manually change certain colors.
palette[["Others"]] = "#E1E1E1"
#  recreate palette with markdown to italicize name and remove the underscore after Unclassified
all_names = data.frame(names(palette))
names_markdown = all_names %>%
mutate(names.palette. = str_replace(names.palette., "(.*)","*\\1*"), # Adding asterisk at beginning and end of every taxa
names.palette. = str_replace(names.palette., "\\*Unclassified_(.*)\\*","Unclassified *\\1*"), # Removing the asterisk for words that don't need to be italicize (Unclassified and Others)
names.palette. = str_replace(names.palette., "\\*Others\\*", "Others"))
list_names=as.vector(names_markdown$names.palette.)
# Replace names of object
names(palette) = c(list_names)
# Making the same modification to the taxa name from the legend to the taxa names in the dataframe
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "(.*)","*\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Unclassified_(.*)\\*","Unclassified *\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Others\\*", "Others")
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 81, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
taxa_rank <- "Genus"
# Defining the number of most abundant taxa to keep
number_of_taxa = 7
ps_rel_abund=transform_sample_counts(ps, function(x) x/sum(x))
ps_glom = tax_glom(ps_rel_abund, taxrank = taxa_rank)
melted_df = psmelt(ps_glom)
# Create an empty list that we will populated with the unique taxa of each sample
list_of_all_taxonomic_rank= list()
i = 0
# Beginning of the for loop
for (each_sample in unique(melted_df$Sample)){
i = i + 1
sample = subset(melted_df, Sample == each_sample) # Create a new dataframe from the iterator (sample).
total_abundance = aggregate(sample$Abundance, by = list(taxa_rank = sample[[taxa_rank]]), FUN = sum) # Combine together the same taxa and sum the abundances
top = head(total_abundance[order(total_abundance$x, decreasing= T),], n = number_of_taxa) # Sort by abundance and keep only the X number of taxa defined by variable number_of_taxa
others_df = sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # Extract in a new dataframe all taxa that are not present in the dataframe `top`
others_list = pull(others_df, taxa_rank) # Create a list by pulling all the values from the column corresponding to the taxa_rank into a list
sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]] = "Others" # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others`
list_of_all_taxonomic_rank[[i]] = sample #save this dataframe in our list
}
df = do.call("rbind",list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe
unique_taxon = data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa
name = colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line
names(unique_taxon)[names(unique_taxon) == name] = as.character(taxa_rank) # Rename the column to the taxa rank defined earlier
# get the total number of unique most abundant taxa
n = nrow(unique_taxon)
# generate a set of X unique colors corresponding to the number of unique taxa
palette = distinctColorPalette(n)
unique_taxon[[taxa_rank]] = factor(unique_taxon[[taxa_rank]])
names(palette) = levels(unique_taxon[[taxa_rank]])
# assign gray to category "Others". The same nomenclature can be use to manually change certain colors.
palette[["Others"]] = "#E1E1E1"
#  recreate palette with markdown to italicize name and remove the underscore after Unclassified
all_names = data.frame(names(palette))
names_markdown = all_names %>%
mutate(names.palette. = str_replace(names.palette., "(.*)","*\\1*"), # Adding asterisk at beginning and end of every taxa
names.palette. = str_replace(names.palette., "\\*Unclassified_(.*)\\*","Unclassified *\\1*"), # Removing the asterisk for words that don't need to be italicize (Unclassified and Others)
names.palette. = str_replace(names.palette., "\\*Others\\*", "Others"))
list_names=as.vector(names_markdown$names.palette.)
# Replace names of object
names(palette) = c(list_names)
# Making the same modification to the taxa name from the legend to the taxa names in the dataframe
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "(.*)","*\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Unclassified_(.*)\\*","Unclassified *\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Others\\*", "Others")
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 81, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 30, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
taxa_rank <- "Genus"
# Defining the number of most abundant taxa to keep
number_of_taxa = 8
ps_rel_abund=transform_sample_counts(ps, function(x) x/sum(x))
ps_glom = tax_glom(ps_rel_abund, taxrank = taxa_rank)
melted_df = psmelt(ps_glom)
# Create an empty list that we will populated with the unique taxa of each sample
list_of_all_taxonomic_rank= list()
i = 0
# Beginning of the for loop
for (each_sample in unique(melted_df$Sample)){
i = i + 1
sample = subset(melted_df, Sample == each_sample) # Create a new dataframe from the iterator (sample).
total_abundance = aggregate(sample$Abundance, by = list(taxa_rank = sample[[taxa_rank]]), FUN = sum) # Combine together the same taxa and sum the abundances
top = head(total_abundance[order(total_abundance$x, decreasing= T),], n = number_of_taxa) # Sort by abundance and keep only the X number of taxa defined by variable number_of_taxa
others_df = sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # Extract in a new dataframe all taxa that are not present in the dataframe `top`
others_list = pull(others_df, taxa_rank) # Create a list by pulling all the values from the column corresponding to the taxa_rank into a list
sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]] = "Others" # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others`
list_of_all_taxonomic_rank[[i]] = sample #save this dataframe in our list
}
df = do.call("rbind",list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe
unique_taxon = data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa
name = colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line
names(unique_taxon)[names(unique_taxon) == name] = as.character(taxa_rank) # Rename the column to the taxa rank defined earlier
# get the total number of unique most abundant taxa
n = nrow(unique_taxon)
# generate a set of X unique colors corresponding to the number of unique taxa
palette = distinctColorPalette(n)
unique_taxon[[taxa_rank]] = factor(unique_taxon[[taxa_rank]])
names(palette) = levels(unique_taxon[[taxa_rank]])
# assign gray to category "Others". The same nomenclature can be use to manually change certain colors.
palette[["Others"]] = "#E1E1E1"
#  recreate palette with markdown to italicize name and remove the underscore after Unclassified
all_names = data.frame(names(palette))
names_markdown = all_names %>%
mutate(names.palette. = str_replace(names.palette., "(.*)","*\\1*"), # Adding asterisk at beginning and end of every taxa
names.palette. = str_replace(names.palette., "\\*Unclassified_(.*)\\*","Unclassified *\\1*"), # Removing the asterisk for words that don't need to be italicize (Unclassified and Others)
names.palette. = str_replace(names.palette., "\\*Others\\*", "Others"))
list_names=as.vector(names_markdown$names.palette.)
# Replace names of object
names(palette) = c(list_names)
# Making the same modification to the taxa name from the legend to the taxa names in the dataframe
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "(.*)","*\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Unclassified_(.*)\\*","Unclassified *\\1*")
df[[taxa_rank]] = str_replace(df[[taxa_rank]], "\\*Others\\*", "Others")
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 30, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
# Ordering the legend in alphabetical order
legend_raw = unique(df[[taxa_rank]]) #Extract legend as text
ordered_legend = sort(legend_raw) # order alphabetically
reordered_legend = fct_relevel(ordered_legend, "Others") # move "Others" to the beginning
final_legend = levels(reordered_legend) # Extract the levels in a new object
my_scale = scale_fill_manual(name = as.character(taxa_rank), breaks = paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force)
p = ggplot(df, aes(x = Scientifique, weight = Abundance, fill = fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank)
geom_bar() +
coord_flip() +
labs(y ='Abondance relative', x="Scientifque") +
theme_classic() +
facet_wrap(~ Region, ncol=2, strip.position="top",scales='free_x') +
theme(text = element_text(size = text_size),
panel.spacing = unit(2, "lines"),
plot.title = element_text(hjust =0.5, size=text_size),
axis.title=element_text(size=text_size),
axis.text.x = element_text(size=text_size, hjust=0.6),
axis.text.y = element_text(size=text_size, vjust=0.5),
legend.position = "right",
legend.title = element_text(size = text_size),
legend.text = element_markdown(size = 12),
legend.key.size = unit(0.5, 'cm'),
legend.margin = margin(), # pre-emptively set zero margins
strip.background = element_blank(),
strip.text = element_text(size = text_size)) + # remove facet_grid box background
my_scale + # Load our color palette
scale_y_continuous(limits = c(0, 1),breaks = seq(0, 1, by = 0.5), expand = c(0,0), labels = c("0", "0.5", "1")) + # Remove the white space
# Adjusting the legend, notably the number of rows and position
guides(fill = guide_legend(nrow = 35, title = "Genre", title.position = "top", title.hjust = 0.5, reverse=FALSE))
#ggsave("Relative_abundance.png", height=15, width=25, path="Plots/")
print(p)
write.csv(df, "./abondances_otu_bio1410_2025_top8.csv", quote=FALSE, sep=",")
# Importer le tableau de données
tableau = read.table(file = "./abondances_otu_bio1410_2025_top8.csv", sep=",", header=TRUE, check.names=FALSE)
# Définir le rang taxonomique d'intérêt
taxa_rank = "Genus"
# Extraire vos échantillons
mes_échantillons = subset(tableau, Scientifique == ma_scientifique & Abundance > 0 & Genus != "Others")
# Afin de visualiser uniquement les 4 taxons les plus abondants on utilise ce qu'on appelle une *for loop* ou boucle en français
empt_df = list() # On génère une liste vide que l'on viendra populer avec les résultats de la foor loop
i = 0 # Ensuite on définit un premier itérateur (de type numérique) qui compte le nombre de loop effectué
# Début de la for loop
for (région_échantillonnée in unique(mes_échantillons$Region)){ # Cette séquence est le début de la loop où l'itérateur de gauche (région)
i = i + 1                                           # représente chaque item de l'itérateur de droite (mes_échantillons$Région)
sample = subset(mes_échantillons, Region == région_échantillonnée) # Générer une nouvelle table de données basée sur la variable définit par l'itérateur
total_abundance = aggregate(sample$Abundance, by = list(taxa_rank = sample[[taxa_rank]]), FUN = sum) # Additionner ensemble les ASVs du même genres
top = head(total_abundance[order(total_abundance$x, decreasing = T),], n = 7) # filtrer en order croissant pour identifer les 3 plus abondants
others_df = sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # identifier les autres genres ne faisant pas partie des 4 plus abonants
others_list = others_df[[taxa_rank]] # extraire leur nom du tableau de données dans une liste
sample[sample[[taxa_rank]] %in% others_list,][[taxa_rank]] = "Autres" # Renommer leur genre pour Autres
empt_df[[i]] = sample # Enregistrer ce nouveau tableau
}
df = do.call("rbind",empt_df) # Combiner les deux tables de données en une seule
# Maintenant que nous avons notre tableau de données avec seulement les 10 taxons les plus abondants sous la langue et la main
# nous pouvons commencer à travailler sur le graphique. On commence par générer une liste de couleurs associées à chacun des taxons
n = nrow(data.frame(unique(df$Genus))) # On calcule le nobre de genre unique que nous avons
palette = randomcoloR::distinctColorPalette(n) # On génère une nouvelle palette
my_scale = ggplot2::scale_fill_manual(name = as.character(taxa_rank), values = palette, na.translate = FALSE, drop = TRUE, limits = force) # On assigne une couleur à chacun de nos genres uniques
# Nous pouvons finalement générer le graphique
graphique = ggplot2::ggplot(df, aes(x = Region, weight = Abundance, fill = .data[[taxa_rank]])) +
facet_grid(~ Region, scales = "free") +
geom_bar() +
labs(y = "Abondance relative (%)") +
scale_y_continuous(expand = c(0,0)) +
theme_classic() +
theme(text = element_text(size = 12), strip.text.x = element_blank(),
plot.title = element_text(hjust = 0.5, margin = margin(0, 0, 50, 0))) +
guides(fill = guide_legend(title = "Genre", title.position = "top")) +
my_scale
graphique # visualiser le graphique produit
